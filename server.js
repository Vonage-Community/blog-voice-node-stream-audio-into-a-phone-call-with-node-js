require("dotenv").config({ path: ".env" });
const express = require("express");
const app = express();
const path = require("path");
const { Vonage } = require("@vonage/server-sdk");
const { NCCOBuilder, Stream } = require("@vonage/voice");

const TO_NUMBER = process.env.TO_NUMBER;
const VONAGE_NUMBER = process.env.VONAGE_NUMBER;
const BASE_URL = process.env.BASE_URL;

const VONAGE_API_KEY = process.env.VONAGE_API_KEY;
const VONAGE_API_SECRET = process.env.VONAGE_API_SECRET;
const VONAGE_APPLICATION_ID = process.env.VONAGE_APPLICATION_ID;
const VONAGE_APPLICATION_PRIVATE_KEY_PATH =
  process.env.VONAGE_APPLICATION_PRIVATE_KEY_PATH;

const vonage = new Vonage({
  apiKey: VONAGE_API_KEY,
  apiSecret: VONAGE_API_SECRET,
  applicationId: VONAGE_APPLICATION_ID,
  privateKey: VONAGE_APPLICATION_PRIVATE_KEY_PATH,
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use("/audio", express.static(path.join(__dirname, "public")));

const answer_url = BASE_URL + "/audio/answer.json";
const audio_url = BASE_URL + "/audio/music.mp3";
const event_url = BASE_URL + "/webhooks/events";

const makeOutboundCall = async (req, res) => {
  const builder = new NCCOBuilder();
  builder.addAction(
    new Stream({ streamUrl: [audio_url], loop: 0 })
  );

  try {
    console.log("Making the outbound call...");

    const resp = await vonage.voice.createOutboundCall(
      {
        to: [{ type: "phone", number: TO_NUMBER }],
        from: { type: "phone", number: VONAGE_NUMBER },
        answer_url: [answer_url], // This will hit the NCCO response
        event_url: [event_url], // Event URL to track events like answered
      },
      builder.build() // Pass the NCCO generated by NCCOBuilder
    );

    console.log("Outbound call response:", resp);
    res.status(200).send("Call initiated!");
  } catch (error) {
    console.error("Error making the outbound call:", error);
    res.status(500).send("Failed to make call.");
  }
};

app.get("/audio/answer.json", (req, res) => {
  const builder = new NCCOBuilder();
  builder.addAction(
    new Stream({ streamUrl: [audio_url], loop: 0 })
  );

  // Send back the generated NCCO
  res.json(builder.build());
});

// Event webhook to manage call events (like 'answered')
app.post("/webhooks/events", (req, res) => {
  if (req.body.status == "answered") {
    const call_uuid = req.body.uuid;
    console.log(`Call answered with UUID: ${call_uuid}`);
  }
  res.status(200).end();
});

app.get("/call", makeOutboundCall);

app.listen(3000, () => {
  console.log("Server is running on port 3000");
});
